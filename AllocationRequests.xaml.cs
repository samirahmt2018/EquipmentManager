using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Equipment_Manager
{
    /// <summary>
    /// Interaction logic for AllocationRequests.xaml
    /// </summary>
    public partial class AllocationRequests : Window
    {
        DataTable values;
        public AllocationRequests()
        {
            InitializeComponent();
            try
            {

                //  allocation_request.ItemsSource = values.AsDataView();
                ExcelFileSelector fileS = new ExcelFileSelector();
                fileS.ShowDialog();
                values = DBManager.SelectFromExcel(fileS.fileName, fileS.sheetName, fileS.cellValues);
                
                allocation_request.ItemsSource = values.AsDataView();
            }
            catch
            {

            }

        }

        private void allocation_request_AutoGeneratedColumns(object sender, EventArgs e)
        {
            try
            {


                allocation_request.Columns[0].Header = "Machine ID";
                allocation_request.Columns[1].Header = "Unit";
                allocation_request.Columns[2].Header = "Quantity";
                allocation_request.Columns[3].Header = "Site ID";
                allocation_request.Columns[4].Header = "Delivery Date";
                allocation_request.Columns[5].Header = "Duration It Stays";
                allocation_request.Columns[6].Header = "Work Type";
                allocation_request.Columns[7].Header = "Work Zone";


                allocation_request.Columns[8].Header = "Volume of Work";

                allocation_request.Columns[9].Header = "Requested By";

                allocation_request.Columns[10].Header = "Remark";


            }
            catch (Exception ex)
            {

                //this.Close();

            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            if (values == null || values.Columns.Count != 11)
            {
                this.Close();
                myMessageBox mm = new myMessageBox("Column Count Doesnt match or no data found", "Error", "OK", 1);
                mm.ShowDialog();

               // MessageBox.Show("Invalid Data size", "Error Occured", MessageBoxButton.OK, MessageBoxImage.Error);

            }
        }

        private void insertButton_Click(object sender, RoutedEventArgs e)
        {
            int i = 0;
            string datas = "";
            try
            {
                foreach (DataRow row in values.Rows)
                {
                    if (i == 0)
                    {
                        datas = "('" + row[0].ToString() + "','" + row[1].ToString() + "','" + row[2].ToString() + "','" + row[3].ToString() + "','" + Convert.ToDateTime(row[4].ToString()).ToString("yyyy-MM-dd HH:mm:ss") + "','" + row[5].ToString() + "','" + row[6].ToString() + "','" + row[7].ToString() + "','" + row[8].ToString() + "','" + row[9].ToString() + "','" + row[10].ToString()  + "')";

                    }
                    else
                    {
                        datas = datas + ",('" + row[0].ToString() + "','" + row[1].ToString() + "','" + row[2].ToString() + "','" + row[3].ToString() + "','" + Convert.ToDateTime(row[4].ToString()).ToString("yyyy-MM-dd HH:mm:ss") + "','" + row[5].ToString() + "','" + row[6].ToString() + "','" + row[7].ToString() + "','" + row[8].ToString() + "','" + row[9].ToString() + "','" + row[10].ToString() + "')";
                    }
                    i++;
                }
                string res = DBManager.InsertIntoAllocationRequestes(datas);
                if (!res.Contains("Success"))
                {
                    myMessageBox mm = new myMessageBox("Invalid Data Type Found. Check your data again", "Error", "OK", 1);
                    mm.ShowDialog();

                    // MessageBox.Show("Invalid Data Type Found. Check your data again", "Error Occured", MessageBoxButton.OK, MessageBoxImage.Error);

                }
                else
                {
                    myMessageBox mm = new myMessageBox("Data added successfully.", "Success", "OK", 0);
                    mm.ShowDialog();

//                    MessageBox.Show("Data Added Succesfully", "Successfully Added", MessageBoxButton.OK, MessageBoxImage.Information);
                    this.Close();
                }
            }
            catch (Exception ex)
            {
                //
            }
        }

    }
}